---
- name: Deploy Simple Web Application
  hosts: webservers
  become: yes
  vars:
    app_name: simple-webapp
    app_user: webapp
    app_dir: /opt/{{ app_name }}
    node_version: 18
    app_port: 3000

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install system dependencies
      apt:
        name:
          - curl
          - git
          - build-essential
          - nginx
        state: present

    - name: Add NodeSource repository key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Add NodeSource repository
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_{{ node_version }}.x {{ ansible_distribution_release }} main"
        state: present

    - name: Install Node.js
      apt:
        name: nodejs
        state: present

    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: /home/{{ app_user }}
        create_home: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Copy application files
      copy:
        src: ../app/
        dest: "{{ app_dir }}/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: preserve

    - name: Install npm dependencies
      npm:
        path: "{{ app_dir }}"
        production: yes
      become_user: "{{ app_user }}"

    - name: Create systemd service file
      template:
        src: templates/webapp.service.j2
        dest: /etc/systemd/system/{{ app_name }}.service
        mode: '0644'

    - name: Configure Nginx
      blockinfile:
        path: /etc/nginx/sites-available/default
        block: |
          upstream {{ app_name }} {
              server localhost:{{ app_port }};
          }

          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://{{ app_name }};
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{ app_name }}"
        create: yes
        backup: yes

    - name: Start and enable application service
      systemd:
        name: "{{ app_name }}"
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

    - name: Ensure firewall allows HTTP
      ufw:
        rule: allow
        port: '80'
        proto: tcp
      when: ansible_facts['os_family'] == "Debian"

    - name: Check if application is running
      uri:
        url: http://localhost:{{ app_port }}/health
        status_code: 200
      register: health_check
      retries: 5
      delay: 2

    - name: Display deployment status
      debug:
        msg: "Application deployed successfully! Access it at http://{{ ansible_host }}"